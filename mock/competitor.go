// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/timwmillard/fishing"
	"sync"
)

// Ensure, that CompetitorRepo does implement fishing.CompetitorRepo.
// If this is not the case, regenerate this file with moq.
var _ fishing.CompetitorRepo = &CompetitorRepo{}

// CompetitorRepo is a mock implementation of fishing.CompetitorRepo.
//
//	func TestSomethingThatUsesCompetitorRepo(t *testing.T) {
//
//		// make and configure a mocked fishing.CompetitorRepo
//		mockedCompetitorRepo := &CompetitorRepo{
//			CreateFunc: func(ctx context.Context, c fishing.CreateCompetitorParams) (fishing.Competitor, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, id fishing.HashID) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, id fishing.HashID) (fishing.Competitor, error) {
//				panic("mock out the Get method")
//			},
//			ListFunc: func(ctx context.Context) ([]fishing.Competitor, error) {
//				panic("mock out the List method")
//			},
//			UpdateFunc: func(ctx context.Context, id fishing.HashID, c fishing.CreateCompetitorParams) (fishing.Competitor, error) {
//				panic("mock out the Update method")
//			},
//			UpdatePartialFunc: func(ctx context.Context, id fishing.HashID, c fishing.UpdateCompetitorParams) (fishing.Competitor, error) {
//				panic("mock out the UpdatePartial method")
//			},
//		}
//
//		// use mockedCompetitorRepo in code that requires fishing.CompetitorRepo
//		// and then make assertions.
//
//	}
type CompetitorRepo struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, c fishing.CreateCompetitorParams) (fishing.Competitor, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id fishing.HashID) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id fishing.HashID) (fishing.Competitor, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context) ([]fishing.Competitor, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id fishing.HashID, c fishing.CreateCompetitorParams) (fishing.Competitor, error)

	// UpdatePartialFunc mocks the UpdatePartial method.
	UpdatePartialFunc func(ctx context.Context, id fishing.HashID, c fishing.UpdateCompetitorParams) (fishing.Competitor, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// C is the c argument value.
			C fishing.CreateCompetitorParams
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID fishing.HashID
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID fishing.HashID
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID fishing.HashID
			// C is the c argument value.
			C fishing.CreateCompetitorParams
		}
		// UpdatePartial holds details about calls to the UpdatePartial method.
		UpdatePartial []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID fishing.HashID
			// C is the c argument value.
			C fishing.UpdateCompetitorParams
		}
	}
	lockCreate        sync.RWMutex
	lockDelete        sync.RWMutex
	lockGet           sync.RWMutex
	lockList          sync.RWMutex
	lockUpdate        sync.RWMutex
	lockUpdatePartial sync.RWMutex
}

// Create calls CreateFunc.
func (mock *CompetitorRepo) Create(ctx context.Context, c fishing.CreateCompetitorParams) (fishing.Competitor, error) {
	callInfo := struct {
		Ctx context.Context
		C   fishing.CreateCompetitorParams
	}{
		Ctx: ctx,
		C:   c,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	if mock.CreateFunc == nil {
		var (
			competitorOut fishing.Competitor
			errOut        error
		)
		return competitorOut, errOut
	}
	return mock.CreateFunc(ctx, c)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedCompetitorRepo.CreateCalls())
func (mock *CompetitorRepo) CreateCalls() []struct {
	Ctx context.Context
	C   fishing.CreateCompetitorParams
} {
	var calls []struct {
		Ctx context.Context
		C   fishing.CreateCompetitorParams
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *CompetitorRepo) Delete(ctx context.Context, id fishing.HashID) error {
	callInfo := struct {
		Ctx context.Context
		ID  fishing.HashID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	if mock.DeleteFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedCompetitorRepo.DeleteCalls())
func (mock *CompetitorRepo) DeleteCalls() []struct {
	Ctx context.Context
	ID  fishing.HashID
} {
	var calls []struct {
		Ctx context.Context
		ID  fishing.HashID
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CompetitorRepo) Get(ctx context.Context, id fishing.HashID) (fishing.Competitor, error) {
	callInfo := struct {
		Ctx context.Context
		ID  fishing.HashID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			competitorOut fishing.Competitor
			errOut        error
		)
		return competitorOut, errOut
	}
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedCompetitorRepo.GetCalls())
func (mock *CompetitorRepo) GetCalls() []struct {
	Ctx context.Context
	ID  fishing.HashID
} {
	var calls []struct {
		Ctx context.Context
		ID  fishing.HashID
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CompetitorRepo) List(ctx context.Context) ([]fishing.Competitor, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	if mock.ListFunc == nil {
		var (
			competitorsOut []fishing.Competitor
			errOut         error
		)
		return competitorsOut, errOut
	}
	return mock.ListFunc(ctx)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedCompetitorRepo.ListCalls())
func (mock *CompetitorRepo) ListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CompetitorRepo) Update(ctx context.Context, id fishing.HashID, c fishing.CreateCompetitorParams) (fishing.Competitor, error) {
	callInfo := struct {
		Ctx context.Context
		ID  fishing.HashID
		C   fishing.CreateCompetitorParams
	}{
		Ctx: ctx,
		ID:  id,
		C:   c,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			competitorOut fishing.Competitor
			errOut        error
		)
		return competitorOut, errOut
	}
	return mock.UpdateFunc(ctx, id, c)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedCompetitorRepo.UpdateCalls())
func (mock *CompetitorRepo) UpdateCalls() []struct {
	Ctx context.Context
	ID  fishing.HashID
	C   fishing.CreateCompetitorParams
} {
	var calls []struct {
		Ctx context.Context
		ID  fishing.HashID
		C   fishing.CreateCompetitorParams
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdatePartial calls UpdatePartialFunc.
func (mock *CompetitorRepo) UpdatePartial(ctx context.Context, id fishing.HashID, c fishing.UpdateCompetitorParams) (fishing.Competitor, error) {
	callInfo := struct {
		Ctx context.Context
		ID  fishing.HashID
		C   fishing.UpdateCompetitorParams
	}{
		Ctx: ctx,
		ID:  id,
		C:   c,
	}
	mock.lockUpdatePartial.Lock()
	mock.calls.UpdatePartial = append(mock.calls.UpdatePartial, callInfo)
	mock.lockUpdatePartial.Unlock()
	if mock.UpdatePartialFunc == nil {
		var (
			competitorOut fishing.Competitor
			errOut        error
		)
		return competitorOut, errOut
	}
	return mock.UpdatePartialFunc(ctx, id, c)
}

// UpdatePartialCalls gets all the calls that were made to UpdatePartial.
// Check the length with:
//
//	len(mockedCompetitorRepo.UpdatePartialCalls())
func (mock *CompetitorRepo) UpdatePartialCalls() []struct {
	Ctx context.Context
	ID  fishing.HashID
	C   fishing.UpdateCompetitorParams
} {
	var calls []struct {
		Ctx context.Context
		ID  fishing.HashID
		C   fishing.UpdateCompetitorParams
	}
	mock.lockUpdatePartial.RLock()
	calls = mock.calls.UpdatePartial
	mock.lockUpdatePartial.RUnlock()
	return calls
}
