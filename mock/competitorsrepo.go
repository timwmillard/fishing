// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	context "context"
	fishing "github.com/timwmillard/fishing"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CompetitorsRepo is an autogenerated mock type for the CompetitorsRepo type
type CompetitorsRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, c
func (_m *CompetitorsRepo) Create(ctx context.Context, c fishing.Competitor) (fishing.Competitor, error) {
	ret := _m.Called(ctx, c)

	var r0 fishing.Competitor
	if rf, ok := ret.Get(0).(func(context.Context, fishing.Competitor) fishing.Competitor); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Get(0).(fishing.Competitor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, fishing.Competitor) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CompetitorsRepo) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *CompetitorsRepo) Get(ctx context.Context, id uuid.UUID) (fishing.Competitor, error) {
	ret := _m.Called(ctx, id)

	var r0 fishing.Competitor
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) fishing.Competitor); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(fishing.Competitor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *CompetitorsRepo) List(ctx context.Context) ([]fishing.Competitor, error) {
	ret := _m.Called(ctx)

	var r0 []fishing.Competitor
	if rf, ok := ret.Get(0).(func(context.Context) []fishing.Competitor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fishing.Competitor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, c
func (_m *CompetitorsRepo) Update(ctx context.Context, c fishing.Competitor) (fishing.Competitor, error) {
	ret := _m.Called(ctx, c)

	var r0 fishing.Competitor
	if rf, ok := ret.Get(0).(func(context.Context, fishing.Competitor) fishing.Competitor); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Get(0).(fishing.Competitor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, fishing.Competitor) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
