// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: competitor.sql

package sqlc

import (
	"context"
)

const createCompetitor = `-- name: CreateCompetitor :one
INSERT INTO fishing.competitor (
    id, competitor_no, first_name, last_name, email, address1, address2, suburb, state, postcode, mobile
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, competitor_no, first_name, last_name, email, address1, address2, suburb, state, postcode, mobile
`

type CreateCompetitorParams struct {
	ID           int64
	CompetitorNo string
	FirstName    string
	LastName     string
	Email        string
	Address1     string
	Address2     string
	Suburb       string
	State        string
	Postcode     string
	Mobile       string
}

func (q *Queries) CreateCompetitor(ctx context.Context, arg CreateCompetitorParams) (FishingCompetitor, error) {
	row := q.db.QueryRowContext(ctx, createCompetitor,
		arg.ID,
		arg.CompetitorNo,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Address1,
		arg.Address2,
		arg.Suburb,
		arg.State,
		arg.Postcode,
		arg.Mobile,
	)
	var i FishingCompetitor
	err := row.Scan(
		&i.ID,
		&i.CompetitorNo,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Address1,
		&i.Address2,
		&i.Suburb,
		&i.State,
		&i.Postcode,
		&i.Mobile,
	)
	return i, err
}

const deleteCompetitor = `-- name: DeleteCompetitor :execrows
DELETE
FROM fishing.competitor
WHERE id = $1
`

func (q *Queries) DeleteCompetitor(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteCompetitor, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getCompetitor = `-- name: GetCompetitor :one
SELECT id, competitor_no, first_name, last_name, email, address1, address2, suburb, state, postcode, mobile
FROM fishing.competitor
WHERE id = $1
`

func (q *Queries) GetCompetitor(ctx context.Context, id int64) (FishingCompetitor, error) {
	row := q.db.QueryRowContext(ctx, getCompetitor, id)
	var i FishingCompetitor
	err := row.Scan(
		&i.ID,
		&i.CompetitorNo,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Address1,
		&i.Address2,
		&i.Suburb,
		&i.State,
		&i.Postcode,
		&i.Mobile,
	)
	return i, err
}

const listCompetitor = `-- name: ListCompetitor :many
SELECT id, competitor_no, first_name, last_name, email, address1, address2, suburb, state, postcode, mobile
FROM fishing.competitor
ORDER BY competitor_no, last_name, first_name ASC
`

func (q *Queries) ListCompetitor(ctx context.Context) ([]FishingCompetitor, error) {
	rows, err := q.db.QueryContext(ctx, listCompetitor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FishingCompetitor
	for rows.Next() {
		var i FishingCompetitor
		if err := rows.Scan(
			&i.ID,
			&i.CompetitorNo,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Address1,
			&i.Address2,
			&i.Suburb,
			&i.State,
			&i.Postcode,
			&i.Mobile,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompetitor = `-- name: UpdateCompetitor :one
UPDATE fishing.competitor
SET competitor_no = COALESCE($2, competitor_no),
    first_name = COALESCE($3, first_name),
    last_name = COALESCE($4, last_name),
    email = COALESCE($5, email),
    address1 = COALESCE($6, address1),
    address2 = COALESCE($7, address2),
    suburb = COALESCE($8, suburb),
    state = COALESCE($9, state),
    postcode = COALESCE($10, postcode),
    mobile = COALESCE($11, mobile)
WHERE id = $1
RETURNING id, competitor_no, first_name, last_name, email, address1, address2, suburb, state, postcode, mobile
`

type UpdateCompetitorParams struct {
	ID           int64
	CompetitorNo string
	FirstName    string
	LastName     string
	Email        string
	Address1     string
	Address2     string
	Suburb       string
	State        string
	Postcode     string
	Mobile       string
}

func (q *Queries) UpdateCompetitor(ctx context.Context, arg UpdateCompetitorParams) (FishingCompetitor, error) {
	row := q.db.QueryRowContext(ctx, updateCompetitor,
		arg.ID,
		arg.CompetitorNo,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Address1,
		arg.Address2,
		arg.Suburb,
		arg.State,
		arg.Postcode,
		arg.Mobile,
	)
	var i FishingCompetitor
	err := row.Scan(
		&i.ID,
		&i.CompetitorNo,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Address1,
		&i.Address2,
		&i.Suburb,
		&i.State,
		&i.Postcode,
		&i.Mobile,
	)
	return i, err
}
