// Code generated by sqlc. DO NOT EDIT.
// source: competitors.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getCompetitors = `-- name: GetCompetitors :one
SELECT id, event_id, competitor_no, firstname, lastname, email, address1, address2, suburb, state, postcode, phone, mobile, paid, registered, checkin, ticket, team_id, user_id FROM competitors
WHERE id = $1
`

func (q *Queries) GetCompetitors(ctx context.Context, id uuid.UUID) (Competitor, error) {
	row := q.db.QueryRowContext(ctx, getCompetitors, id)
	var i Competitor
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.CompetitorNo,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Address1,
		&i.Address2,
		&i.Suburb,
		&i.State,
		&i.Postcode,
		&i.Phone,
		&i.Mobile,
		&i.Paid,
		&i.Registered,
		&i.Checkin,
		&i.Ticket,
		&i.TeamID,
		&i.UserID,
	)
	return i, err
}

const listCompetitors = `-- name: ListCompetitors :many
SELECT id, event_id, competitor_no, firstname, lastname, email, address1, address2, suburb, state, postcode, phone, mobile, paid, registered, checkin, ticket, team_id, user_id FROM competitors
ORDER BY competitor_no, lastname, firstname ASC
`

func (q *Queries) ListCompetitors(ctx context.Context) ([]Competitor, error) {
	rows, err := q.db.QueryContext(ctx, listCompetitors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Competitor
	for rows.Next() {
		var i Competitor
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.CompetitorNo,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.Address1,
			&i.Address2,
			&i.Suburb,
			&i.State,
			&i.Postcode,
			&i.Phone,
			&i.Mobile,
			&i.Paid,
			&i.Registered,
			&i.Checkin,
			&i.Ticket,
			&i.TeamID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
